swagger: "2.0"
info:
  description: This is a Noomi API.
  version: 0.0.4
  title: Noomi API
  termsOfService: http://noomi.com/api/terms/
  contact:
    email: support@noomi.com...
host: api.dev.noomi.com
basePath: /v1
version  tags:
  - name: organisations
  - name: sites
  - name: units
  - name: users
  - name: auth
schemes:
  - httpsasdf
securityDefinitions:
  JWT:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://dummy.auth.net/auth
    tokenUrl: https://dummy.auth.net/token'
    scopes:
      OrganisationAdmin: OrganisationAdmin scope
      SiteAdmin: SiteAdmin scope
      Member: Member scope
      SetPass: SetPass scope
      SetPin: SetPin scope

paths:
  /organisations:
    post:
      tags:
        - organisations
      summary: Create organisation
      operationId: createOrganisation
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Organisation object to create
          required: true
          schema:
            $ref: "#/definitions/CreateOrganisationReq"
      responses:
        201:
          description: Created
          headers:
            Location:
              type: string
              description: URI of the created object
        500:
          description: Internal Server Error
    get:
      tags:
        - organisations
      summary: Get all organisations
      operationId: getOrganisations
      produces:
        - application/json; charset=utf-8
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Organisation"
        500:
          description: Internal Server Error

  /organisations/{id}:
    get:
      tags:
        - organisations
      summary: Find organisation by ID
      operationId: getOrganisationByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of organisation to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Organisation"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /organisations/{id}/sites:
    get:
      tags:
        - organisations
      summary: Get organisation sites
      operationId: getSitesForOrganisation
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of organisation to return sites for
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Site"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /organisations/{id}/sites/overview:
    get:
      tags:
        - organisations
      summary: Get organisation sites overview
      operationId: getSitesOverviewForOrganisation
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of organisation to return sites overview for
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/SiteOverview"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /organisations/{id}/users:
    get:
      tags:
        - organisations
      summary: Returns users for organisation
      operationId: getUsersForOrganisation
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of organisation
          required: true
          type: integer
          format: int64
        - name: roles
          in: query
          type: array
          items:
            type: string
            enum:
              - None
              - OrganisationAdmin
              - SiteAdmin
              - Member
          description: select additional data for resident
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /organisations/overview:
    get:
      tags:
        - organisations
      summary: Returns organisations overview
      operationId: getOverviewForOrganisations
      produces:
        - application/json; charset=utf-8
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/OrganisationOverview"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /sites:
    post:
      tags:
        - sites
      summary: Create site
      operationId: createSite
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Site object to create
          required: true
          schema:
            $ref: "#/definitions/CreateSiteReq"
      responses:
        201:
          description: Created
          headers:
            Location:
              type: string
              description: URI of the created object
        500:
          description: Internal Server Error
        400:
          description: Bad Request

  /sites/{id}:
    get:
      tags:
        - sites
      summary: Find site by ID
      operationId: getSiteByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of site to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Site"
        404:
          description: Not Found
        500:
          description: Internal Server Error
    put:
      tags:
        - sites
      summary: Edit site info
      operationId: editSite
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the site to edit
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Edited site object
          required: true
          schema:
            $ref: "#/definitions/EditSiteReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Site"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /sites/{id}/units:
    get:
      tags:
        - sites
      summary: Get site units
      operationId: getUnitsForSite
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of site to return units for
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Unit"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /sites/{id}/units/overview:
    get:
      tags:
        - sites
      summary: Get site units overviews
      operationId: getUnitsOverviewForSite
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of site to return units overview for
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/UnitOverview"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /sites/{id}/residents:
    get:
      tags:
        - sites
      summary: Returns residents for site
      operationId: getResidentsForSite
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of site
          required: true
          type: integer
          format: int64
        - name: unitId
          in: query
          type: array
          items:
            type: integer
            format: int64
          description: Unit Id
        - name: fields
          in: query
          type: array
          items:
            type: string
            enum:
              - events
              - rules
          description: select additional data for resident
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Resident"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /sites/{id}/users:
    get:
      tags:
        - sites
      summary: Returns users for site
      operationId: getUsersForSite
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of site
          required: true
          type: integer
          format: int64
        - name: unitId
          in: query
          type: array
          items:
            type: integer
            format: int64
        - name: fields
          in: query
          type: array
          items:
            type: string
            enum:
              - events
              - units
        - name: roles
          in: query
          type: array
          items:
            type: string
            enum:
              - None
              - OrganisationAdmin
              - SiteAdmin
              - Member
          description: select additional data for users
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /sites/{id}/areas:
    get:
      tags:
        - sites
      summary: Get areas for site
      operationId: getAreasForSite
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the site
          required: true
          type: integer
          format: int64
        - name: type
          in: query
          description: Area type
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Area"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /sites/{id}/events:
    get:
      tags:
        - sites
      summary: Get events for site
      operationId: getEventsForSite
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the site
          required: true
          type: integer
          format: int64
        - name: type
          in: query
          description: Event type
          type: string
        - name: units
          in: query
          description: Units ID
          type: array
          items:
            type: integer
        - name: from
          in: query
          description: Events from date
          type: string
          format: date-time
        - name: to
          in: query
          description: Event till date
          type: string
          format: date-time

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Event"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /sites/{id}/rules:
    get:
      tags:
        - sites
      summary: Get rules for site
      operationId: getRulesForSite
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the site
          required: true
          type: integer
          format: int64

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Rule"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /sites/{id}/devices:
    get:
      tags:
        - sites
      summary: Get devices for site
      operationId: getDevicesForSite
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the site
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Device"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /units:
    post:
      tags:
        - units
      summary: Create unit
      operationId: createUnit
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Unit object to create
          required: true
          schema:
            $ref: "#/definitions/CreateUnitReq"
      responses:
        201:
          description: Created
          headers:
            Location:
              type: string
              description: URI of the created object
        500:
          description: Internal Server Error

  /units/{id}:
    get:
      tags:
        - units
      summary: Find unit by ID
      operationId: getUnitByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of unit to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Unit"
        404:
          description: Not Found
        500:
          description: Internal Server Error
    put:
      tags:
        - units
      summary: Edit unit info
      operationId: editUnit
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the unit to edit
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Edited unit object
          required: true
          schema:
            $ref: "#/definitions/EditUnitReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Unit"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /units/{id}/areas:
    get:
      tags:
        - units
      summary: Get areas for unit
      operationId: getAreasForUnit
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the unit
          required: true
          type: integer
          format: int64
        - name: type
          in: query
          description: Area type
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Area"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /units/{id}/areas/overview:
    get:
      tags:
        - units
      summary: Get unit areas overviews
      operationId: getAreasOverviewForUnit
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of unit to return areas overview for
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/AreaOverview"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /thirdpartyDevices:
    post:
      tags:
        - thirdpartyDevices
      summary: Create third party devices
      operationId: createThirdPartyDevices
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Third party device object to create
          required: true
          schema:
            $ref: "#/definitions/CreateThirdPartyDeviceReq"
      responses:
        201:
          description: Created
          headers:
            Location:
              type: string
              description: URI of the created object
        400:
          description: Bad Request
        409:
          description: Device already exists
        500:
          description: Internal Server Error

  /thirdpartyDevices/{id}:
    get:
      tags:
        - thirdpartyDevices
      summary: Find thirdpartyDevice by ID
      operationId: getThirdPartyDeviceByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of third party Device to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ThirdPartyDevice"
        401:
          description: Bad Request
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /residents:
    post:
      tags:
        - residents
      summary: Create resident
      operationId: createResident
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Resident object to create
          required: true
          schema:
            $ref: "#/definitions/CreateResidentReq"
      responses:
        201:
          description: Created
          headers:
            Location:
              type: string
              description: URI of the created object
        500:
          description: Internal Server Error

  /residents/{id}:
    get:
      tags:
        - residents
      summary: Find resident by ID
      operationId: getResidentByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of resident to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Resident"
        401:
          description: Un..
        404:
          description: Not Found
        500:
          description: Internal Server Error
    put:
      tags:
        - residents
      summary: Edit resident info
      operationId: editResident
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the resident to edit
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Edited resident object
          required: true
          schema:
            $ref: "#/definitions/EditResidentReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Resident"
        404:
          description: Not Found
        500:
          description: Internal Server Error
    delete:
      tags:
        - residents
      summary: Deletes resident with specified ID
      operationId: deleteResident
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of a resident to delete
          required: true
          type: integer
          format: int64
      responses:
        501:
          description: Not Implemented

  /residents/{id}/thirdpartyDevice:
    get:
      tags:
        - residents
      summary: Get all third party devices related to a resident
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of a resident to get third party to
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/ThirdPartyDevice"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
    post:
      tags:
        - residents
      summary: Associate thirdparty device with a resident
      operationId: addThirdPartyDeviceToResident
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of a resident to attach thirdparty to
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Resident object to associate thirdparty to
          required: true
          schema:
            $ref: "#/definitions/AddThirdPartyToResidentReq"
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
        409:
          description: Resident And Device Already Exist
        500:
          description: Internal Server Error

  /residents/{id}/wristband:
    post:
      tags:
        - residents
      summary: Associate wristband with a resident
      operationId: addWristbandToResident
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of a resident to attach wristband to
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Resident object to associate wristband to
          required: true
          schema:
            $ref: "#/definitions/AddWristbandToResidentReq"
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
        409:
          description: Resident And Device Already Exist
        500:
          description: Internal Server Error
    delete:
      tags:
        - residents
      summary: Disassociate wristband from a resident
      operationId: deleteWristbandFromResident
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of a resident to delete wristband from
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: No Content
        500:
          description: Internal Server Error

  /residents/{id}/events:
    get:
      tags:
        - residents
      summary: Get events for a resident
      operationId: getEventsForResident
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the resident
          required: true
          type: integer
          format: int64
        - name: from
          in: query
          description: Events from date
          type: string
          format: date-time
        - name: to
          in: query
          description: Events till date
          type: string
          format: date-time
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Event"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /residents/{id}/rules:
    get:
      tags:
        - residents
      summary: Get rules for a resident
      operationId: getRulesForResident
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the resident
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Rule"
        404:
          description: Not Found
        500:
          description: Internal Server Error
    post:
      tags:
        - residents
      summary: Apply rule to resident
      operationId: applyRuleToResident
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of resident
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: ID of rule to be removed
          required: true
          schema:
            $ref: "#/definitions/RuleIDBody"
      responses:
        204:
          description: OK
        404:
          description: Not Found
        409:
          description: Conflict
        500:
          description: Internal Server Error

  /residents/{id}/rules/{ruleID}:
    delete:
      tags:
        - residents
      summary: Delete rule from resident
      operationId: deleteRuleFromResident
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of resident
          required: true
          type: integer
          format: int64
        - name: ruleID
          in: path
          description: ID of the rule which is to be removed from resident
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: OK
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /users:
    post:
      tags:
        - users
      summary: Create user
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: User object to create
          required: true
          schema:
            $ref: "#/definitions/CreateUserReq"
      responses:
        201:
          description: Created
          headers:
            Location:
              type: string
              description: URI of the created object
        500:
          description: Internal Server Error

  /users/{id}:
    get:
      tags:
        - users
      summary: Find user by ID
      operationId: getUserByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
        404:
          description: Not Found
        500:
          description: Internal Server Error
    put:
      tags:
        - users
      summary: Edit user info
      operationId: editUser
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the user to edit
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Updated user info
          required: true
          schema:
            $ref: "#/definitions/EditUserReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
        400:
          description: Invalid ID supplied
        404:
          description: user not found
        500:
          description: Internal Server Error
    delete:
      tags:
        - users
      summary: Deletes user with specified ID
      operationId: deleteUser
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of a user to delete
          required: true
          type: integer
          format: int64
      responses:
        501:
          description: Not Implemented

  /users/{id}/password:
    post:
      security:
        - JWT:
            - SetPass
      tags:
        - users
      summary: Set password for the user
      operationId: addPasswordToUser
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: Authorization
          in: header
          description: Bearer Token
          required: true
          type: string
        - name: id
          in: path
          description: ID of the user
          required: true
          type: integer
          format: int64
        - name: newPass
          in: formData
          description: New password to be set
          required: true
          type: string
          format: password
          minLength: 10
        - name: repeatNewPass
          in: formData
          description: Copy of the new pass to check validity
          required: true
          type: string
          format: password
          minLength: 10
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
        401:
          description: Unauthorized
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /users/{id}/units:
    post:
      tags:
        - users
      summary: Subscribe user to units
      operationId: subscribeUserToUnits
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of a user to the units
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: a list of unitIDs that the user is about to subscribe
          required: true
          schema:
            $ref: "#/definitions/SubscribeUserToUnitsReq"
      responses:
        204:
          description: No Content
        400:
          description: Invalid user id or unit id
        500:
          description: Internal Server Error

  /users/{id}/clip:
    post:
      tags:
        - users
      summary: Associate clip with a user
      operationId: addClipToUser
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of a user to attach clip to
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: User object to associate clip to
          required: true
          schema:
            $ref: "#/definitions/AddClipToUserReq"
      responses:
        204:
          description: No Content
        404:
          description: Not Found
        409:
          description: Duplicated Clip Serieal Number
        500:
          description: Internal Server Error
    delete:
      tags:
        - users
      summary: Delete clip from a user
      operationId: deleteClipFromUser
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of a user to delete clip from
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: No Content
        500:
          description: Internal Server Error

  /users/{id}/clip/pin:
    post:
      security:
        - JWT:
            - SetPin
      tags:
        - users
      summary: Set pin for user's clip
      operationId: addPinToUserClip
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: Authorization
          in: header
          description: Bearer Token
          required: true
          type: string
        - name: id
          in: path
          description: ID of the user
          required: true
          type: integer
          format: int64
        - name: newPin
          in: formData
          description: New pin to be set
          required: true
          type: string
          pattern: '^\d{4}$'
        - name: repeatNewPin
          in: formData
          description: Copy of the new pin to check validity
          required: true
          type: string
          pattern: '^\d{4}$'
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Internal Server Error

  /users/{id}/fcmtoken:
    post:
      tags:
        - users
      summary: Associate fcm token with a user
      operationId: addFCMTokenToUser
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of a user to attach clip to
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: User object to associate clip to
          required: true
          schema:
            $ref: "#/definitions/AddFCMTokenToUserReq"
      responses:
        204:
          description: No Content
        500:
          description: Internal Server Error
    delete:
      tags:
        - users
      summary: Delete fcm token from a user
      operationId: deleteFCMTokenFromUser
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of a user to delete clip from
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: No Content
        500:
          description: Internal Server Error

  /users/{id}/events:
    get:
      tags:
        - users
      summary: Get events for a user
      operationId: getEventsForUser
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          type: integer
          format: int64
        - name: from
          in: query
          description: Events from date
          type: string
          format: date-time
        - name: to
          in: query
          description: Events till date
          type: string
          format: date-time
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Event"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /events/{id}:
    get:
      tags:
        - events
      summary: Find event by ID
      operationId: getEventByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of event to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Event"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /events/{id}/assist:
    post:
      tags:
        - events
      summary: Assist event action
      description: Assist
      operationId: assistEventByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of event to assist
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Event"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /events/{id}/stopassist:
    post:
      tags:
        - events
      summary: Stop assisting event action
      description: Stop assisting
      operationId: stopAssistEventByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of event to stop assist
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Event"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /events/{id}/resolve:
    post:
      tags:
        - events
      summary: Resolve event
      operationId: resolveEventByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of event to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Event"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /events/{id}/edit:
    post:
      tags:
        - events
      summary: Edit event
      operationId: editEventByID
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of event to edit
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Edited event object
          required: true
          schema:
            $ref: "#/definitions/EditEventReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Event"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /events/{id}/help:
    post:
      tags:
        - events
      summary: Call for help
      operationId: helpEventByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of event to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Event"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /rules:
    post:
      tags:
        - rules
      summary: Create rule
      operationId: createRule
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Rule object to create
          required: true
          schema:
            $ref: "#/definitions/CreateRuleReq"
      responses:
        201:
          description: Created
          headers:
            Location:
              type: string
              description: URI of the created object
        409:
          description: Conflict
        500:
          description: Internal Server Error

  /rules/{id}:
    get:
      tags:
        - rules
      summary: Find rule by ID
      operationId: getRuleByID
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of rule to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Rule"
        404:
          description: Not Found
        500:
          description: Internal Server Error
    put:
      tags:
        - rules
      summary: Edit rule
      operationId: editRule
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the rule to edit
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Edited rule object
          required: true
          schema:
            $ref: "#/definitions/EditRuleReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Rule"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /alarms:
    post:
      tags:
        - alarms
      summary: Create an alarm
      description: Create an alarm
      operationId: createAlarm
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Alarm object to create
          required: true
          schema:
            $ref: "#/definitions/CreateAlarmReq"
      responses:
        201:
          description: Created
        202:
          description: Accepted
        400:
          description: Bad Request
        500:
          description: Internal Server Error

  /alarms/fireAlarm/trigger:
    post:
      tags:
        - alarms
      summary: Trigger a fire alarm
      description: Trigger a fire alarm
      operationId: triggerFireAlarm
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Information related fire alarm
          required: true
          schema:
            $ref: "#/definitions/TriggerFireAlarmReq"
      responses:
        201:
          description: Created
        400:
          description: Bad Request
        500:
          description: Internal Server Error

  /alarms/fireAlarm/resolve:
    post:
      tags:
        - alarms
      summary: Resolve a fire alarm
      description: Trigger a fire alarm
      operationId: resolveFireAlarm
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Information related fire alarm resolution
          required: true
          schema:
            $ref: "#/definitions/ResolveFireAlarmReq"
      responses:
        200:
          description: Ok
        400:
          description: Bad Request
        500:
          description: Internal Server Error

  /areas/{id}/node:
    post:
      tags:
        - areas
      summary: Add Node to Area
      operationId: addNodeToArea
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of area
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Node object to create
          required: true
          schema:
            $ref: "#/definitions/AddNodeToAreaReq"
      responses:
        201:
          description: Created
        400:
          description: Area ID Does Not Exists
        409:
          description: Node Area Relation Already Exists
        500:
          description: Internal Server Error

  /areas/{id}:
    put:
      tags:
        - areas
      summary: Edit area
      operationId: editArea
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of the area to edit
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Edited area object
          required: true
          schema:
            $ref: "#/definitions/EditAreaReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Area"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /areas/{id}/thirdPartyDevice:
    post:
      tags:
        - areas
      summary: Add Third Party Device to Area
      operationId: addThirdPartyDeviceToArea
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: id
          in: path
          description: ID of area
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Third Party Device object to add
          required: true
          schema:
            $ref: "#/definitions/AddThirdPartyToAreaReq"
      responses:
        201:
          description: Created
        400:
          description: Area ID Does Not Exists
        409:
          description: Node Area Relation Already Exists
        500:
          description: Internal Server Error

  /areas:
    post:
      tags:
        - areas
      summary: Create areas
      operationId: createAreas
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Unit object to create
          required: true
          schema:
            $ref: "#/definitions/CreateAreasReq"
      responses:
        201:
          description: Created
          headers:
            Location:
              type: string
              description: URI of the created object
        500:
          description: Internal Server Error

  /devices/registration:
    post:
      tags:
        - devices
      summary: Register new device
      operationId: registerDevice
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Device information needed for registration
          required: true
          schema:
            $ref: "#/definitions/DeviceRegistrationReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/DeviceRegistrationResp"
        500:
          description: Internal Server Error

  /devices/provisioning:
    post:
      tags:
        - devices
      summary: Device provisioning operation
      operationId: provisionDevice
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - in: body
          name: body
          description: Device information for provisioning
          required: true
          schema:
            $ref: "#/definitions/DeviceProvisioningReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/DeviceProvisioningResp"
        500:
          description: Internal Server Error

  /devices/{serialNumber}/user:
    get:
      tags:
        - devices
      summary: Get user by device (clip) serial number
      operationId: getUserByClipSerialNumber
      produces:
        - application/json; charset=utf-8
      parameters:
        - name: serialNumber
          in: path
          description: serial number of device (clip)
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /auth/password:
    delete:
      tags:
        - auth
      summary: Reset user's password
      operationId: resetPassword
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
      responses:
        204:
          description: No Content
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /auth/token/{target}:
    post:
      tags:
        - auth
      summary: Create auth token
      operationId: createAuthToken
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: X-Noomi-Platform
          in: header
          description: User's platform
          type: string
          enum:
            - app
            - web
        - name: target
          in: path
          description: Authentication target
          required: true
          type: string
          enum:
            - clip
            - user
        - name: targetID
          in: formData
          description: ID of auth target
          required: true
          type: string
        - name: secret
          in: formData
          description: Target's secret
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
          headers:
            Authorization:
              description: Authorization header with the token
              type: string
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Internal Server Error

  /auth/token:
    delete:
      tags:
        - auth
      summary: Invalidate token and logout
      operationId: deleteAuthToken
      security:
        - JWT:
            - OrganisationAdmin
            - SiteAdmin
            - Member
      parameters:
        - name: Authorization
          in: header
          description: Bearer Token
          required: true
          type: string
      responses:
        204:
          description: No Content
        500:
          description: Internal Server Error

definitions:
  Organisation:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: Noomi
      iconUrl:
        type: string
        format: url
      splashscreenUrl:
        type: string
        format: url

  CreateOrganisationReq:
    type: object
    required:
      - name
    properties:
      name:
        type: string

  Site:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: Munkbron
      phone:
        type: integer
        format: int64
      WifiPassword:
        type: string
        example: pwd
      SSID:
        type: string
        example: dentification
      organisation:
        $ref: "#/definitions/Organisation"
      contact:
        $ref: "#/definitions/User"

  CreateSiteReq:
    type: object
    required:
      - name
      - organisationId
    properties:
      name:
        type: string
      phone:
        type: integer
        format: int64
      contactID:
        type: integer
        format: int64
      wifiPassword:
        type: string
      SSID:
        type: string
      organisationId:
        type: integer
        format: int64
      numberOfUnits:
        type: integer
        format: int64
      numberOfApartmentsPerUnit:
        type: integer
        format: int64
      numberOfCommonAreasPerUnit:
        type: integer
        format: int64
      numberOfRestrictedAreasPerUnit:
        type: integer
        format: int64
      namesOfUnits:
        type: array
        items:
          type: string

  EditSiteReq:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      phone:
        type: integer
        format: int64
      contactID:
        type: integer
        format: int64
      wifiPassword:
        type: string
      SSID:
        type: string

  Unit:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: 2nd floor
      type:
        type: string
        enum:
          - Unit
          - PublicSpaces
      site:
        $ref: "#/definitions/Site"

  EditUnitReq:
    type: object
    required:
      - name
    properties:
      name:
        type: string

  Area:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      type:
        type: string
        enum:
          - Generic
          - Apartment
          - Common
          - Restricted
      unit:
        $ref: "#/definitions/Unit"

  CreateUnitReq:
    type: object
    required:
      - name
      - siteId
      - type
    properties:
      name:
        type: string
      siteId:
        type: integer
        format: int64
      type:
        type: string
        default: Unit
        enum:
          - Unit
          - PublicSpaces
      numberOfApartmentsPerUnit:
        type: integer
        format: int64
      numberOfCommonAreasPerUnit:
        type: integer
        format: int64
      numberOfRestrictedAreasPerUnit:
        type: integer
        format: int64

  AddNodeToAreaReq:
    type: object
    required:
      - serialNumber
    properties:
      serialNumber:
        type: string

  CreateAreasReq:
    type: object
    required:
      - unitId
    properties:
      unitId:
        type: integer
        format: int64
      numberOfApartments:
        type: integer
        format: int64
      numberOfCommonAreas:
        type: integer
        format: int64
      numberOfRestrictedAreas:
        type: integer
        format: int64

  EditAreaReq:
    type: object
    required:
      - name
      - type
    properties:
      name:
        type: string
      type:
        type: string
        enum:
          - Generic
          - Apartment
          - Common
          - Restricted

  Node:
    type: object
    required:
      - serialNumber
      - wifiSSID
    properties:
      id:
        type: integer
        format: int64
      firmwareVersion:
        type: string
      serialNumber:
        type: string
      wifiSSID:
        type: string
      lastSync:
        type: string
        format: date-time
        x-nullable: true

  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
      organisation:
        $ref: "#/definitions/Organisation"
      site:
        $ref: "#/definitions/Site"
      role:
        type: string
        enum:
          - None
          - OrganisationAdmin
          - SiteAdmin
          - Member
      clip:
        $ref: "#/definitions/Clip"
      status:
        type: string
        enum:
          - Online
          - Offline
          - Unknown
      lastSeen:
        type: string
        format: date-time
        x-nullable: true
      isBlocked:
        type: boolean
        default: false
      events:
        type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/Event"
      unitsSubscriptions:
        type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/UserUnitSubscription"

  UserUnitSubscription:
    type: object
    required:
      - unit
      - status
    properties:
      unit:
        $ref: "#/definitions/Unit"
      status:
        type: string
        enum:
          - CURRENT
          - PREVIOUS

  CreateUserReq:
    type: object
    required:
      - firstName
      - lastName
      - email
      - organisationId
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
      organisationId:
        type: integer
        format: int64
      siteId:
        type: integer
        format: int64
        x-nullable: true
      role:
        type: string
        enum:
          - None
          - OrganisationAdmin
          - SiteAdmin
          - Member

  EditUserReq:
    type: object
    required:
      - firstName
      - lastName
      - email
      - role
      - isBlocked
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
      role:
        type: string
        enum:
          - None
          - OrganisationAdmin
          - SiteAdmin
          - Member
      isBlocked:
        type: boolean

  SubscribeUserToUnitsReq:
    type: object
    required:
      - unitIDs
    properties:
      unitIDs:
        type: array
        items:
          type: integer
      status:
        type: string

  AddClipToUserReq:
    type: object
    required:
      - serialNumber
    properties:
      serialNumber:
        type: string

  AddFCMTokenToUserReq:
    type: object
    required:
      - token
    properties:
      token:
        type: string

  Resident:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      site:
        $ref: "#/definitions/Site"
      apartment:
        $ref: "#/definitions/Area"
      wristband:
        $ref: "#/definitions/Wristband"
      thirdPartyDevices:
        type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/ThirdPartyDevice"
      events:
        type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/Event"
      rules:
        type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/Rule"
      createdAt:
        type: string
        format: date-time

  CreateThirdPartyDeviceReq:
    type: object
    required:
      - vendor
      - serialNumber
      - type
    properties:
      vendor:
        type: string
      serialNumber:
        type: string
      type:
        type: string
        enum:
          - OutOfBedIRSensor

  TriggerFireAlarmReq:
    type: object
    required:
      - area
      - siteId
    properties:
      siteId:
        type: integer
        format: int64
      area:
        type: string

  ResolveFireAlarmReq:
    type: object
    required:
      - reason
      - siteId
    properties:
      siteId:
        type: integer
        format: int64
      reason:
        type: string

  CreateResidentReq:
    type: object
    required:
      - firstName
      - apartmentId
    properties:
      firstName:
        type: string
      lastName:
        type: string
        x-nullable: true
      siteId:
        type: integer
        format: int64
        x-nullable: true
      apartmentId:
        type: integer
        format: int64

  EditResidentReq:
    type: object
    required:
      - firstName
      - lastName
      - apartmentId
    properties:
      firstName:
        type: string
      lastName:
        type: string
      siteId:
        type: integer
        format: int64
        x-nullable: true
      apartmentId:
        type: integer
        format: int64

  TriggerThirdPartyDeviceAlertReq:
    type: object
    required:
      - serialNumber
    properties:
      serialNumber:
        type: string

  AddThirdPartyToAreaReq:
    type: object
    required:
      - serialNumber
    properties:
      serialNumber:
        type: string

  AddThirdPartyToResidentReq:
    type: object
    required:
      - serialNumber
    properties:
      serialNumber:
        type: string

  AddWristbandToResidentReq:
    type: object
    required:
      - serialNumber
    properties:
      serialNumber:
        type: string

  Wristband:
    type: object
    properties:
      id:
        type: integer
        format: int64
      mac:
        type: string
      firmwareVersion:
        type: string
      battery:
        type: number
        format: float
      lastSync:
        type: string
        format: date-time
        x-nullable: true

  Clip:
    type: object
    properties:
      id:
        type: integer
        format: int64
      mac:
        type: string
      firmwareVersion:
        type: string
      battery:
        type: number
        format: float
      lastSync:
        type: string
        format: date-time
        x-nullable: true

  Event:
    type: object
    properties:
      id:
        type: integer
        format: int64
      type:
        type: string
        enum:
          - OutOfBed
          - OutOfArea
          - WristbandOff
          - Assistance
          - HardFall
          - FireAlarm
          - StaffAssistance
          - SlidingFall
      priority:
        type: string
        enum:
          - low
          - normal
          - high
      count:
        type: integer
        format: int64
      resident:
        $ref: "#/definitions/EventResident"
      location:
        properties:
          name:
            type: string
      actions:
        type: array
        items:
          $ref: "#/definitions/EventAction"
      createdAt:
        type: string
        format: date-time

  EventAction:
    type: object
    properties:
      id:
        type: integer
        format: int64
      type:
        type: string
        enum:
          - Create
          - Assist
          - CallForHelp
          - Resolve
          - Edit
          - StopAssist
      note:
        type: string
      tags:
        type: array
        items:
          type: string
      performedBy:
        $ref: "#/definitions/EventActionUser"
      createdAt:
        type: string
        format: date-time

  EventResident:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      apartment:
        $ref: "#/definitions/Area"

  EventActionUser:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string

  EditEventReq:
    type: object
    properties:
      note:
        type: string
      tags:
        type: array
        items:
          type: string

  CreateAlarmReq:
    type: object
    required:
      - provider
      - type
      - serialNumber
      - priority
    properties:
      provider:
        type: string
        description: Name of the partner
        example: tjeders
      type:
        type: string
        description: Alarm type
        enum:
          - OutOfBed
          - FireAlarm
          - Door
          - Bed
          - Emergency
          - Motion
          - Voice
      externalID:
        type: integer
        description: External id of the alarm
        example: 1
      serialNumber:
        type: string
      priority:
        type: string
        description: Alarm priority
        enum:
          - low
          - normal
          - high

  ResolveEventReq:
    type: object
    properties:
      note:
        type: string
      tags:
        type: array
        items:
          type: string

  ThirdPartyDevice:
    type: object
    properties:
      id:
        type: integer
        format: int64
      resident:
        $ref: "#/definitions/Resident"
      area:
        $ref: "#/definitions/Area"
      vendor:
        type: string
      serialNumber:
        type: string

  Device:
    type: object
    properties:
      id:
        type: integer
        format: int64
      type:
        type: string
        enum:
          - Clip
          - Wristband
          - Node
      status:
        type: string
        enum:
          - Online
          - Offline
      position:
        type: string
      area:
        $ref: "#/definitions/Area"
      unit:
        $ref: "#/definitions/Unit"
      lastSync:
        type: string
        format: date-time
        x-nullable: true
      battery:
        type: number
        format: float
      mac:
        type: string
      serialNumber:
        type: string
      firmwareVersion:
        type: string
      wifiStrength:
        type: number
        format: float
      wifiSSID:
        type: string

  Rule:
    type: object
    properties:
      id:
        type: integer
        format: int64
      type:
        type: string
        enum:
          - Activity
          - Location
      active:
        type: boolean
      priority:
        type: string
        enum:
          - low
          - normal
          - high
      activity:
        type: string
        enum:
          - OutOfBed
          - OutOfArea
          - WristbandOff
          - Assistance
          - HardFall
          - FireAlarm
          - SlidingFall
      unit:
        $ref: "#/definitions/Unit"
      area:
        $ref: "#/definitions/Area"
      setting:
        type: string
        enum:
          - Allowed
          - Restricted
          - TimeRange
      timeRangeFrom:
        type: string
        pattern: "^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])?$"
      timeRangeTo:
        type: string
        pattern: "^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])?$"

  ResidentRule:
    type: object
    properties:
      id:
        type: integer
        format: int64
      resident:
        $ref: "#/definitions/Resident"
      rule:
        $ref: "#/definitions/Rule"

  CreateRuleReq:
    type: object
    required:
      - type
    properties:
      type:
        type: string
        enum:
          - Activity
          - Location
      active:
        type: boolean
      priority:
        type: string
        enum:
          - low
          - normal
          - high
      activity:
        type: string
        enum:
          - OutOfBed
          - OutOfArea
          - WristbandOff
          - Assistance
          - HardFall
          - FireAlarm
          - SlidingFall
      areaId:
        type: integer
        format: int64
      setting:
        type: string
        enum:
          - Allowed
          - Restricted
          - TimeRange
      timeRangeFrom:
        type: string
        pattern: "^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])?$"
      timeRangeTo:
        type: string
        pattern: "^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])?$"
      siteId:
        type: integer
        format: int64

  EditRuleReq:
    type: object
    properties:
      active:
        type: boolean
      priority:
        type: string
        enum:
          - low
          - normal
          - high

  OrganisationOverview:
    type: object
    properties:
      name:
        type: string
      sites:
        type: integer
        format: int64
      units:
        type: integer
        format: int64
      apartments:
        type: integer
        format: int64
      commonAreas:
        type: integer
        format: int64
      restrictedAreas:
        type: integer
        format: int64
      nodesActive:
        type: integer
        format: int64
      nodesDeactivated:
        type: integer
        format: int64
      wristbandsActive:
        type: integer
        format: int64
      wristbandsDeactivated:
        type: integer
        format: int64
      clips:
        type: integer
        format: int64
      coWorkersOnline:
        type: integer
        format: int64
      coWorkersNotOnline:
        type: integer
        format: int64
      alerts:
        type: integer
        format: int64

  SiteOverview:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      phone:
        type: integer
        format: int64
      contact:
        type: integer
        format: int64
      contactEmail:
        type: string
      ssid:
        type: string
      wifiPassword:
        type: string
      units:
        type: integer
        format: int64
      apartments:
        type: integer
        format: int64
      commonAreas:
        type: integer
        format: int64
      restrictedAreas:
        type: integer
        format: int64
      nodesActive:
        type: integer
        format: int64
      nodesDeactivated:
        type: integer
        format: int64
      wristbandsActive:
        type: integer
        format: int64
      wristbandsDeactivated:
        type: integer
        format: int64
      clips:
        type: integer
        format: int64
      coWorkersOnline:
        type: integer
        format: int64
      coWorkersNotOnline:
        type: integer
        format: int64
      alerts:
        type: integer
        format: int64

  UnitOverview:
    type: object
    properties:
      name:
        type: string
      apartments:
        type: integer
        format: int64
      commonAreas:
        type: integer
        format: int64
      restrictedAreas:
        type: integer
        format: int64
      nodesActive:
        type: integer
        format: int64
      nodesDeactivated:
        type: integer
        format: int64
      wristbandsActive:
        type: integer
        format: int64
      wristbandsDeactivated:
        type: integer
        format: int64
      alerts:
        type: integer
        format: int64

  AreaOverview:
    type: object
    properties:
      name:
        type: string
      nodesActive:
        type: integer
        format: int64
      nodesDeactivated:
        type: integer
        format: int64
      wristbandsActive:
        type: integer
        format: int64
      wristbandsDeactivated:
        type: integer
        format: int64
      alerts:
        type: integer
        format: int64

  RuleIDBody:
    type: object
    properties:
      id:
        type: integer
        format: int64

  DeviceRegistrationReq:
    type: object
    properties:
      deviceNumber:
        type: string
      deviceType:
        type: string
        enum:
          - Node

  DeviceRegistrationResp:
    type: object
    properties:
      token:
        type: string

  DeviceProvisioningReq:
    type: object
    properties:
      deviceNumber:
        type: string
      token:
        type: string
      csr:
        type: string
        format: byte

  DeviceProvisioningResp:
    type: object
    properties:
      deviceNumber:
        type: string
      certificate:
        type: string
        format: byte

  APIResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string

  Principal:
    type: string
